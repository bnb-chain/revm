
use crate::{Bytes, Error, Precompile, PrecompileError, PrecompileResult, PrecompileWithAddress};
use tendermint::lite::iavl_proof;
use parity_bytes::BytesRef;

pub const IAVL_PROOF_VALIDATION: PrecompileWithAddress = PrecompileWithAddress(
    crate::u64_to_address(101),
    Precompile::Standard(crate::iavl::iavl_proof_validation_run),
);

fn iavl_proof_validation_run(input: &Bytes, gas_limit: u64) -> PrecompileResult {
    const IAVL_PROOF_VALIDATION_BASE: u64 = 3_000;

    if IAVL_PROOF_VALIDATION_BASE > gas_limit {
        return Err(Error::OutOfGas);
    }

    let mut output = [0u8; 32];
    let mut bytes = BytesRef::Fixed(&mut output);
    let res = iavl_proof::execute(input.as_ref(), &mut bytes);
    match res {
        Ok(()) => Ok((
            IAVL_PROOF_VALIDATION_BASE,
            Bytes::copy_from_slice(&output[..]))),
        Err(str) => Err(PrecompileError::Other(String::from(str)))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use revm_primitives::hex;

    #[test]
    fn test_iavl_proof_validation_run() {
        let input = hex::decode("00000000000000000000000000000000000000000000000000000000000007ae6962630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000010038020000000000019ce2000000000000000000000000000000000000000000000000000000000000009300000000000000000000000000000000000000000000000000000e35fa931a0000f870a0424e420000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000889bef94293405280094ef81397266e8021d967c3099aa8b781f8c3f99f2948ba31c21685c7ffa3cbb69cd837672dd5254cadb86017713ec8491cb58b672e759d5c7d9b6ac2d39568153aaa730c488acaa3d6097d774df0976900a91070a066961766c3a76120e0000010038020000000000019ce21af606f4060af1060a2d08121083bc0618cbcf954222206473c3fc09d3e700e4b8121ebedb8defedb38a57a11fa54300c7f537318c9b190a2d0811108f960418cbcf954222208b061ab760b6341a915696265ab0841f0657f0d0ad75c5bc08b5a92df9f6e84a0a2d081010c7d20118cbcf9542222091759ca6146640e0a33de7be5b53db2c69abf3eaf4b483a0b86cc8893d8853ce0a2c080f10c77318cbcf95422220d0d5c5c95b4e1d15b8cf01dfa68b3af6a846d549d7fb61eaed3ae6a256bd0e350a2c080e10c74318cbcf954222207183ccf5b70efc3e4c849c86ded15118819a46a9fb7eea5034fd477d56bf3c490a2c080d10c72b18cbcf954222205b5a92812ee771649fa4a53464ae7070adfd3aaea01140384bd9bfc11fe1ec400a2c080c10c71318cbcf95422220dc4d735d7096527eda97f96047ac42bcd53eee22c67a8e2f4ed3f581cb11851a0a2c080b10c70718cbcf95422a20b5d530b424046e1269950724735a0da5c402d8640ad4a0e65499b2d05bf7b87b0a2c080a10e40518cbcf95422220a51a3db12a79f3c809f63df49061ad40b7276a10a1a6809d9e0281cc35534b3f0a2c080910e40318cbcf9542222015eb48e2a1dd37ad88276cb04935d4d3b39eb993b24ee20a18a6c3d3feabf7200a2c080810e40118cbcf954222204c1b127f2e7b9b063ef3111479426a3b7a8fdea03b566a6f0a0decc1ef4584b20a2b0807106418cbcf95422220d17128bc7133f1f1159d5c7c82748773260d9a9958aa03f39a380e6a506435000a2b0806102418cbcf95422220959951e4ac892925994b564b54f7dcdf96be49e6167497b7c34aac7d8b3e11ac0a2b0805101418cbcf95422220e047c1f1c58944a27af737dcee1313dc501c4e2006663e835bcca9662ffd84220a2b0804100c18cbcf95422220ddf4258a669d79d3c43411bdef4161d7fc299f0558e204f4eda40a7e112007300a2b0803100818cbcf95422220e2ecce5e132eebd9d01992c71a2d5eb5d579b10ab162fc8a35f41015ab08ac750a2b0802100418cbcf9542222078a11f6a79afcc1e2e4abf6c62d5c1683cfc3bd9789d5fd4828f88a9e36a3b230a2b0801100218cbcf954222206d61aa355d7607683ef2e3fafa19d85eca227e417d68a8fdc6166dde4930fece1a370a0e0000010038020000000000019ce2122086295bb11ac7cba0a6fc3b9cfd165ea6feb95c37b6a2f737436a5d138f29e23f18cbcf95420af6050a0a6d756c746973746f726512036962631ae205e0050add050a330a06746f6b656e7312290a2708d6cf95421220789d2c8eac364abf32a2200e1d924a0e255703a162ee0c3ac2c37b347ae3daff0a0e0a0376616c12070a0508d6cf95420a320a057374616b6512290a2708d6cf954212207ebe9250eeae08171b95b93a0e685e8f25b9e2cce0464d2101f3e5607b76869e0a320a05706169727312290a2708d6cf95421220fe5e73b53ccd86f727122d6ae81aeab35f1e5338c4bdeb90e30fae57b202e9360a300a0369626312290a2708d6cf95421220af249eb96336e7498ffc266165a9716feb3363fc9560980804e491e181d8b5760a330a0662726964676512290a2708d6cf95421220bd239e499785b20d4a4c61862145d1f8ddf96c8e7e046d6679e4dfd4d38f98300a0f0a046d61696e12070a0508d6cf95420a300a0361636312290a2708d6cf954212208450d84a94122dcbf3a60b59b5f03cc13d0fee2cfe4740928457b885e9637f070a380a0b61746f6d69635f7377617012290a2708d6cf954212208d76e0bb011e064ad1964c1b322a0df526d24158e1f3189efbf5197818e711cb0a2f0a02736312290a2708d6cf95421220aebdaccfd22b92af6a0d9357232b91b342f068386e1ddc610f433d9feeef18480a350a08736c617368696e6712290a2708d6cf95421220fb0f9a8cf22cca3c756f8fefed19516ea27b6793d23a68ee85873b92ffddfac20a360a0974696d655f6c6f636b12290a2708d6cf95421220b40e4164b954e829ee8918cb3310ba691ea8613dc810bf65e77379dca70bf6ae0a330a06706172616d7312290a2708d6cf9542122024a0aa2cea5a4fd1b5f375fcf1e1318e5f49a5ff89209f18c12505f2d7b6ecb40a300a03676f7612290a2708d6cf95421220939b333eb64a437d398da930435d6ca6b0b1c9db810698f1734c141013c08e350a300a0364657812290a2708d6cf954212204fb5c65140ef175a741c8603efe98fc04871717d978e7dfb80a4a48e66d21e960a110a066f7261636c6512070a0508d6cf9542").unwrap();
        let res = iavl_proof_validation_run(&Bytes::from(input), 3_000u64).unwrap();

        let gas = res.0;
        assert_eq!(gas, 3_000u64);

        let res = hex::encode(res.1);
        assert_eq!(res, "0000000000000000000000000000000000000000000000000000000000000001")
    }
}